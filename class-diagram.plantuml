@startuml

class Usuario {
    - UUID id
    - String nome
    - String cpf
    - String email
    - String telefone
    + void cadastrar()
    + void editar()
    + void excluir()
}

class Cliente {
    - UUID id
    - Usuario usuario
    + void cadastrar()
    + void editar()
    + void excluir()
}

class Servico {
    - UUID id
    - String descricao
    - BigDecimal preco
    - int duracao
    + void cadastrar()
    + void editar()
    + void excluir()
}

class Agendamento {
    - UUID id
    - Cliente cliente
    - Funcionario funcionario
    - Servico servico
    - LocalDate data
    - Pagamento pagamento
    - StatusAgendamento status
    - Feedback feedback
    + void agendar()
    + void editar()
    + void cancelar()
}

enum StatusAgendamento {
    + int AGENDADO
    + int CANCELADO
    + int CONCLUIDO
}

class Funcionario {
    - UUID id
    - Usuario usuario
    - Perfil perfil
    - List<Horario> horarios
    + void cadastrar()
    + void editar()
    + void excluir()
}

enum Perfil {
    + int ADMINISTRADOR
    + int FUNCIONARIO
}

class Pagamento {
    - UUID id
    - BigDecimal valor
    - MetodoPagamento metodo
    - LocalDateTime dataHora
    + void cadastrar()
    + void editar()
    + void excluir()
}

enum MetodoPagamento {
    + int DINHEIRO
    + int CARTAO
    + int PIX
}

class Feedback {
    - UUID id
    - String comentario
    - int avaliacao
    + void cadastrar()
    + void editar()
    + void excluir()
}

Cliente "1" -up-> "1" Usuario

Funcionario "1" -up-> "1" Usuario
Funcionario "*" o-> "1" Perfil

Agendamento "1" o-left-> "1" Cliente
Agendamento "1" o-> "1" Funcionario
Agendamento "1" o-> "1" Servico
Agendamento "1" o-down-> "1" Pagamento
Agendamento "*" o-down-> "1" StatusAgendamento
Agendamento "*" o-down-> "1" Feedback

Servico "1" --> "1" Cliente

Pagamento "*" o-down-> "1" MetodoPagamento

@enduml
